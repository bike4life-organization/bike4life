{"version":3,"file":"main.js","mappings":"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","sources":["webpack://bike4life/./apps/notifier/src/pull-listener.ts","webpack://bike4life/./libs/commons/src/index.ts","webpack://bike4life/./libs/commons/src/lib/commons.ts","webpack://bike4life/./libs/commons/src/lib/logger.ts","webpack://bike4life/./libs/commons/src/lib/pubsub/client.ts","webpack://bike4life/external commonjs \"@google-cloud/pubsub\"","webpack://bike4life/external commonjs \"dotenv\"","webpack://bike4life/external commonjs \"tslib\"","webpack://bike4life/external commonjs \"winston\"","webpack://bike4life/webpack/bootstrap","webpack://bike4life/./apps/notifier/src/main.ts"],"sourcesContent":["import { logger, PubSubClient } from '@bike4life/commons'\nimport { Message } from '@google-cloud/pubsub'\n\nconst { PUBSUB_PROJECT_ID, PUBSUB_SUBSCRIPTION_NAME, PUBSUB_TOPIC_NAME } = process.env\n\nconst pubsubSettings = {\n  projectId: PUBSUB_PROJECT_ID,\n  subscriptionName: PUBSUB_SUBSCRIPTION_NAME,\n  topicName: PUBSUB_TOPIC_NAME\n}\n\nexport default async function startPullListener(): Promise<void> {\n  const pubsubClient = new PubSubClient(pubsubSettings.projectId, logger)\n  try {\n    const subscription = await pubsubClient.getSubscription(pubsubSettings.topicName, pubsubSettings.subscriptionName)\n    logger.info('listening messages from topics')\n\n    subscription.on('message', async (message: Message) => {\n      const { attributes } = message\n\n      logger.info(`received message from topic ${attributes.topic}: ${message.id}, ${message.data.toString()}`)\n      message.ack() // we ack or we will get it redelivered\n    })\n\n\n    // Receive callbacks for errors on the subscription\n    subscription.on('error', err => {\n      console.log(err)\n      logger.error('error received from subscription')\n    })\n  } catch (err) {\n    console.log(err)\n    logger.error({ error: err })\n    process.exit(1)\n  }\n}","export * from './lib/commons';\nexport * from './lib/logger';\nexport * from './lib/pubsub/client';\n","export function commons(): string {\n    return 'commons';\n}","import { createLogger, format, transports } from 'winston'\n\n// Define log format\nconst logFormat = format.printf(({ timestamp, level, message }) => `${timestamp} ${level}: ${message}`)\n\n/*\n * Log Level\n * error: 0, warn: 1, info: 2, http: 3, verbose: 4, debug: 5, silly: 6\n */\nconst logger = createLogger({\n  format: format.combine(\n    format.timestamp({\n      format: 'YYYY-MM-DD HH:mm:ss',\n    }),\n    logFormat,\n  ),\n  transports: [\n    new transports.Console({\n      format: format.combine(format.splat(), format.colorize()),\n    }),\n  ],\n})\n\nconst stream = {\n  write: (message: string) => {\n    logger.info(message.substring(0, message.lastIndexOf('\\n')))\n  },\n}\n\nexport { logger, stream }","import { Attributes, PublishError, PubSub, Subscription, Topic } from '@google-cloud/pubsub'\nimport { Logger } from 'winston'\n\ninterface Message {\n  payload: unknown\n  attributes: Attributes\n}\n\nexport class PubSubClient {\n  projectId: string\n  client: PubSub\n  logger: Logger\n\n  constructor(projectId: string, logger?: Logger) {\n    this.projectId = projectId\n    this.client = new PubSub({ projectId })\n    if (logger) {\n      this.logger = logger\n    }\n  }\n\n  async publishMessage(\n    topicName: string,\n    message: Message\n  ): Promise<string | undefined> {\n    const { payload, attributes } = message\n\n    const topic = await this.getTopic(topicName)\n    const messageBuffer = Buffer.from(JSON.stringify(payload), 'utf8')\n\n    const messageId = await topic.publish(messageBuffer, attributes)\n    await topic.flush()\n\n    return messageId\n  }\n\n  /**\n  *\n  * @param maxInProgress Limit how many messages can have the subscription in progress. 0 means unlimited\n  * @returns A PubSub subscription\n  */\n  async getSubscription(topicName: string, subscriptionName: string): Promise<Subscription> {\n    const topic = await this.getTopic(topicName)\n\n    let subscription: Subscription\n\n    try {\n      [subscription] = await topic.createSubscription(subscriptionName)\n      this.logger.info({ subscription: subscriptionName, message: 'subscription created' })\n    } catch (err) {\n      const castedErr = err as PublishError\n      if (castedErr.code === 6) { // Already exists\n        subscription = topic.subscription(subscriptionName)\n      } else {\n        this.logger.error({ error: err, message: 'error creating subscription' })\n        throw err\n      }\n    }\n\n\n    return subscription\n  }\n\n  private async getTopic(topicName: string): Promise<Topic> {\n    let topic: Topic\n    try {\n      [topic] = await this.client.createTopic(topicName)\n      this.logger.info({ topic: topic.name, message: 'topic created' })\n    } catch (err) {\n      const castedErr = err as PublishError\n      if (castedErr.code === 6) { // Already exists\n        topic = this.client.topic(topicName)\n      } else {\n        this.logger.error({ error: err, topic: topicName, message: 'error creating topic' })\n        throw err\n      }\n    }\n\n    return topic\n  }\n}\n","module.exports = require(\"@google-cloud/pubsub\");","module.exports = require(\"dotenv\");","module.exports = require(\"tslib\");","module.exports = require(\"winston\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId](module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import { config } from 'dotenv'\nconfig({ path: '../../.env' })\n\nimport startPullListener from './pull-listener'\n\nconst start = (): Promise<void> => {\n  return startPullListener()\n}\n\nstart()"],"names":[],"sourceRoot":""}